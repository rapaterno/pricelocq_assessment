// Mocks generated by Mockito 5.3.2 from annotations
// in pricelocq_assessment/test/unit_tests/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pricelocq_assessment/data/model/station.dart' as _i5;
import 'package:pricelocq_assessment/data/repository/auth/abstract_auth_repository.dart'
    as _i2;
import 'package:pricelocq_assessment/data/repository/station/abstract_station_repository.dart'
    as _i4;
import 'package:pricelocq_assessment/data/storage/abstract_storage.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AbstractAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractAuthRepository extends _i1.Mock
    implements _i2.AbstractAuthRepository {
  MockAbstractAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> login({
    required String? username,
    required String? password,
    _i2.ProfileType? profileType = _i2.ProfileType.plc,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #username: username,
            #password: password,
            #profileType: profileType,
          },
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
}

/// A class which mocks [AbstractStationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractStationRepository extends _i1.Mock
    implements _i4.AbstractStationRepository {
  MockAbstractStationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i5.Station>> getStationList({
    int? page = 1,
    int? perPage = 1000,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStationList,
          [],
          {
            #page: page,
            #perPage: perPage,
          },
        ),
        returnValue: _i3.Future<List<_i5.Station>>.value(<_i5.Station>[]),
      ) as _i3.Future<List<_i5.Station>>);
}

/// A class which mocks [AbstractStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractStorage extends _i1.Mock implements _i6.AbstractStorage {
  MockAbstractStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> write({
    required String? key,
    required String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<String?> read({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {#key: key},
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
}
